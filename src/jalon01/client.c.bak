#include <stdlib.h>
#include <unistd.h>
#include <stdio.h>
#include <string.h>
#include <netinet/in.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netdb.h>
#include <arpa/inet.h>
#include <time.h>
#include "include/client_tools.h"



//Corps-------------------------------------------------------------------------


int main(int argc,char** argv){
  if (argc != 3)
  {
    fprintf(stderr,"usage: RE216_CLIENT  port hostname\n");
    return 1;
  }

  //Variables--------------------------------------------------------------

  char buffer[MSG_SIZE];
  char saisie[MSG_SIZE];
  char copie[MSG_SIZE];
  int socket;
  struct sockaddr_in pointeur_serv_addr;
  const void* msg = copie;
  int i=0;

  //get the socket--------------------------------------------------------------
  printf("Etape : Création socket\n");
  socket = do_socket(AF_INET,SOCK_STREAM,IPPROTO_TCP);

  //init the serv_add structure-------------------------------------------------
  printf("Etape : Informations serveur\n");
  get_addr_info(argv[1], &pointeur_serv_addr,argv[2]);

  //connect to remote socket----------------------------------------------------
  printf("Connexion au serveur\n");
  do_connect(socket,pointeur_serv_addr);


  //Obligation identification
  memset(buffer,'\0',MSG_SIZE);
  do_read(socket,buffer);
  printf("%s\n",buffer);





 while(1){

    memset(saisie,'\0',MSG_SIZE);
    do_read(STDIN_FILENO,saisie);
    //strcpy(saisie,"/nick ");
    //strcat(saisie,argv[3]);
    if(strncmp(saisie,"/nick ",strlen("/nick "))==0){
      memset (copie, '\0', MSG_SIZE);
      strncpy(copie,saisie,strlen(saisie)-1);
      handle_client_message(socket,copie);
      do_read(socket,buffer);
      if(strncmp(buffer,"Pseudo déjà existant, veuillez en choisir un nouveau",strlen("Pseudo déjà existant, veuillez en choisir un nouveau"))==0){
        printf("%s\n",buffer);
      }
      else{
        printf("Identification réussie\n%s\n",buffer);
        break;
      }
    }
    else{
      printf("Identification échec : veuillez respecter la synthaxe\n");
    }
  }

  pid_t pid=fork();

  while(1){


    if(pid==0){
      //read what the client has to say---------------------------------------------
      memset (buffer, '\0', strlen(buffer));
      do_read(socket,buffer);
      fprintf(stdout,"%s\n",buffer);

    }
    else{
      //get user input--------------------------------------------------------------
      do_read(STDIN_FILENO,saisie);
      memset (copie, '\0', MSG_SIZE);
      strncpy(copie,saisie,strlen(saisie)-1);
      msg = copie;

      //send message to the server--------------------------------------------------
      handle_client_message(socket,msg);

      //connexion end---------------------------------------------------------------
      if(strncmp(msg, "/quit",strlen("/quit")-1) == 0){
        printf("Fermeture connexion client\n");
        break;
      }

    }
  }


  //close socket----------------------------------------------------------------
  printf("Fermeture socket\n");
  close(socket);

  return 0;

}
